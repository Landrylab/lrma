
from pandas import read_csv
ns = read_csv('/mnt/HDD3/lrma/script/ns_subg.csv', index_col=0)

# define functions for use as input/params
def get_fast5(S):
    return [ns.loc[s, 'path'] for s in S]
def get_seq_sum(S):
    return [ns.loc[s, 'sequencing_summary'] for s in S]

rule all:
    input:
        expand('/mnt/HDD3/lrma/nanopolish/{s}/{s}.nanopolish.fasta', s=ns.index)

rule nanopolish_index:
    input:
        draft='/mnt/HDD3/lrma/wtdbg2/{s}/{s}.cns.fa',
        reads = '/mnt/HDD3/lrma/sort/{s}.reads.fastq',
        bam='/mnt/HDD3/lrma/minimap_polish/{s}.draft.minimap.bam'
    params:
        seq_sum = get_seq_sum
    output:
        '/mnt/HDD3/lrma/sort/{s}.reads.fastq.index.readdb'
    shell:
        'nanopolish index -d /mnt/HDD3/MinKNOW/data/ma_nanopore/ -s {params.seq_sum} {input.reads}; '

rule nanopolish_consensus:
    input:
        draft='/mnt/HDD3/lrma/wtdbg2/{s}/{s}.cns.fa',
        reads='/mnt/HDD3/lrma/sort/{s}.reads.fastq',
        indexed_reads='/mnt/HDD3/lrma/sort/{s}.reads.fastq.index.readdb',
        bam='/mnt/HDD3/lrma/minimap_polish/{s}.draft.minimap.bam'
    output:
        '/mnt/HDD3/lrma/nanopolish/{s}/{s}.nanopolish.fasta'
    shell:
        'if [ ! -d {wildcards.s} ]; then mkdir {wildcards.s}; fi; '
        'python ~/software/nanopolish/scripts/nanopolish_makerange.py {input.draft} | parallel --results {wildcards.s}/nanopolish.{wildcards.s}.results -P 1 '
        'nanopolish variants --consensus -o {wildcards.s}/polished.{wildcards.s}.{{1}}.vcf -w {{1}} -r {input.reads} -b {input.bam} -g {input.draft} '
        '-t 4 --min-candidate-frequency 0.1; '
        'nanopolish vcf2fasta -g {input.draft} {wildcards.s}/polished.{wildcards.s}.*.vcf > {output}'
